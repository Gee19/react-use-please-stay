{"version":3,"sources":["CodeHighlighter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CodeHighlighter","props","code","language","defaultProps","theme","className","style","tokens","getLineProps","getTokenProps","padding","map","line","i","key","token","App","useState","titles","setTitles","intervalTime","setIntervalTime","AnimationType","LOOP","animationType","setAnimationType","faviconURIs","setFaviconURIs","alwaysRunAnimations","setAlwaysRunAnimations","usePleaseStay","interval","title","join","faviconLink","toString","onClick","text","window","clipboardData","setData","document","queryCommandSupported","textarea","createElement","textContent","position","body","appendChild","select","execCommand","ex","console","warn","removeChild","copyToClipboard","value","onChange","event","target","split","type","parseInt","id","checked","name","htmlFor","CASCADE","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.30a5a007.chunk.js","sourcesContent":["import * as React from 'react';\nimport Highlight, { defaultProps, Language } from 'prism-react-renderer';\nimport theme from \"prism-react-renderer/themes/dracula\";\n\nexport interface ICodeHighlighterProps {\n  language: Language;\n  code: string;\n}\n\nexport function CodeHighlighter(props: ICodeHighlighterProps) {\n  const { code, language } = props;\n  return (\n    <Highlight {...defaultProps} theme={theme} code={code} language={language}>\n      {({ className, style, tokens, getLineProps, getTokenProps }) => (\n        <pre className={className} style={{...style, padding: '1rem'}}>\n          {tokens.map((line, i) => (\n            <div {...getLineProps({ line, key: i })}>\n              {line.map((token, key) => (\n                <span {...getTokenProps({ token, key })} />\n              ))}\n            </div>\n          ))}\n        </pre>\n      )}\n    </Highlight>\n  );\n}\n","import React from 'react';\nimport { useState } from 'react';\nimport { AnimationType, usePleaseStay } from 'react-use-please-stay';\nimport { CodeHighlighter } from './CodeHighlighter';\n\nfunction App() {\n  const [titles, setTitles] = useState<Array<string>>([\n    'Whoa! Redux Favicon?!',\n    'React App',\n  ]);\n  const [intervalTime, setIntervalTime] = useState<number>(1000);\n  const [animationType, setAnimationType] = useState<AnimationType>(\n    AnimationType.LOOP,\n  );\n  const [faviconURIs, setFaviconURIs] = useState<Array<string>>([\n    'https://redux.js.org/img/favicon/favicon.ico',\n  ]);\n  const [alwaysRunAnimations, setAlwaysRunAnimations] = useState<boolean>(true);\n\n  usePleaseStay({\n    titles,\n    interval: intervalTime,\n    animationType,\n    faviconURIs,\n    alwaysRunAnimations,\n  });\n\n  const code = `usePleaseStay({\n    titles: [\n      ${titles.map((title) => `\"${title}\"`).join(',\\n      ')}\n    ],\n    interval: ${intervalTime},\n    animationType: Animation.${animationType},\n    faviconURIs: [\n      ${faviconURIs\n      .map((faviconLink) => `\"${faviconLink}\"`)\n      .join(',\\n      ')}\n    ],\n    alwaysRunAnimations: ${alwaysRunAnimations.toString()}\n})`;\n\n// Copies a string to the clipboard. Must be called from within an\n// event handler such as click. May return false if it failed, but\n// this is not always possible. Browser support for Chrome 43+,\n// Firefox 42+, Safari 10+, Edge and Internet Explorer 10+.\n// Internet Explorer: The clipboard feature may be disabled by\n// an administrator. By default a prompt is shown the first\n// time the clipboard is used (per session).\nconst copyToClipboard = (text: string) => {\n  if ((window as any).clipboardData && (window as any).clipboardData.setData) {\n      // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.\n      return (window as any).clipboardData.setData(\"Text\", text);\n  }\n  else if (document.queryCommandSupported && document.queryCommandSupported(\"copy\")) {\n      const textarea = document.createElement(\"textarea\");\n      textarea.textContent = text;\n      textarea.style.position = \"fixed\";  // Prevent scrolling to bottom of page in Microsoft Edge.\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n          return document.execCommand(\"copy\");  // Security exception may be thrown by some browsers.\n      }\n      catch (ex) {\n          console.warn(\"Copy to clipboard failed.\", ex);\n          return false;\n      }\n      finally {\n          document.body.removeChild(textarea);\n      }\n  }\n}\n\n  return (\n    <div className=\"container my-5\">\n      <h1>usePleaseStay</h1>\n      <p>An interactive demo showcasing all options.</p>\n      <strong className=\"d-block\">The hook code you see below is identical to what is running on this site (and will likewise update as you change the option values)!</strong>\n      <strong className=\"d-block mt-3\">Have fun experimenting!</strong>\n      <p className=\"mt-3\">Copy and paste this code right into your component:</p>\n      <CodeHighlighter code={code} language=\"tsx\" />\n      <button className=\"btn btn-primary\" onClick={() => copyToClipboard(code)}>Copy</button>\n      <h2>Options</h2>\n      <form>\n        <pre className=\"font-weight-bold\">titles</pre>\n        <small>(Comma separated)</small>\n        <div className=\"form-group\">\n          <textarea\n            className=\"form-control\"\n            value={titles}\n            onChange={(event) => setTitles(event.target.value.split(','))}\n          ></textarea>\n        </div>\n        <pre className=\"font-weight-bold\">interval</pre>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control\"\n            value={intervalTime}\n            type=\"number\"\n            onChange={(event) => {\n              const value = parseInt(event.target.value);\n              if (value) {\n                setIntervalTime(value);\n              }\n            }}\n          ></input>\n        </div>\n        <pre className=\"font-weight-bold\">animationType</pre>\n        <div className=\"form-check form-check-inline\">\n          <input\n            id=\"loop\"\n            className=\"form-check-input\"\n            checked={animationType === AnimationType.LOOP}\n            onChange={() => setAnimationType(AnimationType.LOOP)}\n            type=\"radio\"\n            value={AnimationType.LOOP}\n            name=\"animationType\"\n          />{' '}\n          <label className=\"form-check-label\" htmlFor=\"loop\">\n            <pre className=\"mb-0 mr-5\">AnimationType.LOOP</pre>\n          </label>\n          <input\n            id=\"cascade\"\n            className=\"form-check-input\"\n            checked={animationType === AnimationType.CASCADE}\n            onChange={() => setAnimationType(AnimationType.CASCADE)}\n            type=\"radio\"\n            value={AnimationType.CASCADE}\n            name=\"animationType\"\n          />{' '}\n          <label className=\"form-check-label\" htmlFor=\"cascade\">\n            <pre className=\"mb-0 mx-1\">AnimationType.CASCADE</pre>\n          </label>\n        </div>\n        <pre className=\"font-weight-bold mt-3\">faviconURIs</pre>\n        <small>(Comma separated)</small>\n        <div className=\"form-group\">\n          <textarea\n            id=\"faviconURIs\"\n            className=\"form-control\"\n            value={faviconURIs}\n            onChange={(event) => setFaviconURIs(event.target.value.split(','))}\n          ></textarea>\n          <p>Try some of these:</p>\n          <p>Redux Favicon: https://redux.js.org/img/favicon/favicon.ico</p>\n          <p>Gatsby Favicon: https://www.gatsbyjs.com/favicon-32x32.png</p>\n          <p>Electron Favicon: https://www.electronjs.org/images/favicon.b7a59262df48d6563400baf5671da548.ico</p>\n        </div>\n        <pre className=\"font-weight-bold\">alwaysRunAnimations</pre>\n        <div className=\"form-check form-check-inline\">\n          <input\n            id=\"animationType\"\n            className=\"form-check-input\"\n            onChange={() => setAlwaysRunAnimations(!alwaysRunAnimations)}\n            type=\"checkbox\"\n            checked={alwaysRunAnimations}\n            name=\"animationType\"\n          />\n          <label className=\"form-check-label\" htmlFor=\"animationType\">\n            <pre className=\"mb-0 mr-5\">{alwaysRunAnimations.toString()}</pre>\n          </label>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}